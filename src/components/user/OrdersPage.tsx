import { useState, useEffect } from "react";
import { useOrders } from "@/api/orderApi";

export default function OrdersPage() {
  const { data: orders = [], isLoading, isError } = useOrders();
  const [filter, setFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [rainbowIndex, setRainbowIndex] = useState(0);

  // Hi·ªáu ·ª©ng c·∫ßu v·ªìng cho ti√™u ƒë·ªÅ
  useEffect(() => {
    const interval = setInterval(() => {
      setRainbowIndex((prev) => (prev + 1) % 7);
    }, 500);
    return () => clearInterval(interval);
  }, []);

  const rainbowColors = [
    "text-red-500",
    "text-orange-500",
    "text-yellow-500",
    "text-green-500",
    "text-blue-500",
    "text-indigo-500",
    "text-purple-500",
  ];

  // ‚úÖ C·∫•u h√¨nh tr·∫°ng th√°i b·∫±ng ti·∫øng Vi·ªát
  const statusConfig: Record<string, { text: string; color: string }> = {
    "ƒêang ch·ªù x·ª≠ l√Ω": {
      text: "ƒêang ch·ªù x·ª≠ l√Ω",
      color: "bg-yellow-100 text-yellow-800 border-yellow-200",
    },
    "ƒêang x·ª≠ l√Ω": {
      text: "ƒêang x·ª≠ l√Ω",
      color: "bg-blue-100 text-blue-800 border-blue-200",
    },
    "ƒê√£ ho√†n t·∫•t": {
      text: "ƒê√£ ho√†n t·∫•t",
      color: "bg-green-100 text-green-800 border-green-200",
    },
    "ƒê√£ h·ªßy": {
      text: "ƒê√£ h·ªßy",
      color: "bg-gray-100 text-gray-500 border-gray-200",
    },
  };

  // ‚úÖ L·ªçc d·ªØ li·ªáu
  const filteredOrders = orders.filter((o) => {
    const matchSearch = o.customer.toLowerCase().includes(filter.toLowerCase());
    const matchStatus =
      statusFilter === "all" ||
      o.status.toLowerCase() === statusFilter.toLowerCase();
    return matchSearch && matchStatus;
  });

  // ‚úÖ Th·ªëng k√™
  const stats = {
    total: filteredOrders.length,
    pending: filteredOrders.filter((o) => o.status === "ƒêang ch·ªù x·ª≠ l√Ω").length,
    processing: filteredOrders.filter((o) => o.status === "ƒêang x·ª≠ l√Ω").length,
    done: filteredOrders.filter((o) => o.status === "ƒê√£ ho√†n t·∫•t").length,
  };

  // ‚úÖ Loading / error
  if (isLoading)
    return <p className="p-6 text-center text-gray-500">ƒêang t·∫£i ƒë∆°n h√†ng...</p>;
  if (isError)
    return <p className="p-6 text-center text-red-500">Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng.</p>;

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1
            className={`text-3xl font-bold mb-2 transition-all duration-500 ${rainbowColors[rainbowIndex]}`}
          >
            Tr·∫°ng th√°i v√† ti·∫øn ƒë·ªô ƒë∆°n h√†ng
          </h1>
          <p
            className={`text-lg transition-all duration-500 ${
              rainbowColors[(rainbowIndex + 2) % 7]
            }`}
          >
            Theo d√µi tr·∫°ng th√°i v√† ti·∫øn ƒë·ªô giao h√†ng
          </p>
        </div>

        {/* Th·ªëng k√™ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <StatBox label="T·ªïng ƒë∆°n h√†ng" value={stats.total} color="text-gray-900" />
          <StatBox label="Ch·ªù x·ª≠ l√Ω" value={stats.pending} color="text-yellow-600" />
          <StatBox label="ƒêang x·ª≠ l√Ω" value={stats.processing} color="text-blue-600" />
          <StatBox label="Ho√†n th√†nh" value={stats.done} color="text-green-600" />
        </div>

        {/* B·ªô l·ªçc */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√¨m ki·∫øm ƒë∆°n h√†ng
              </label>
              <input
                type="text"
                placeholder="Nh·∫≠p t√™n kh√°ch h√†ng..."
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                L·ªçc theo tr·∫°ng th√°i
              </label>
              <select
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
              >
                <option value="all">T·∫•t c·∫£</option>
                <option value="ƒêang ch·ªù x·ª≠ l√Ω">Ch·ªù x·ª≠ l√Ω</option>
                <option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</option>
                <option value="ƒê√£ ho√†n t·∫•t">Ho√†n th√†nh</option>
                <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
              </select>
            </div>
          </div>
        </div>

        {/* B·∫£ng ƒë∆°n h√†ng */}
        <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    M√£ ƒë∆°n
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Kh√°ch h√†ng
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Ng√†y ƒë·∫∑t
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Tr·∫°ng th√°i
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    T·ªïng ti·ªÅn
                  </th>
                </tr>
              </thead>
              <tbody>
                {filteredOrders.map((o) => {
                  const conf =
                    statusConfig[o.status] ??
                    { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "bg-gray-100 text-gray-500" };
                  return (
                    <tr key={o.id} className="hover:bg-gray-50 text-sm">
                      <td className="p-3 border-b">#{o.id}</td>
                      <td className="p-3 border-b">{o.customer}</td>
                      <td className="p-3 border-b">
                        {new Date(o.createdAt).toLocaleDateString("vi-VN")}
                      </td>
                      <td className="p-3 border-b">
                        <span
                          className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${conf.color}`}
                        >
                          {conf.text}
                        </span>
                      </td>
                      <td className="p-3 border-b font-medium text-gray-900">
                        {o.total.toLocaleString()}‚Ç´
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {filteredOrders.length === 0 && (
            <div className="text-center py-8">
              <div className="text-gray-400 text-4xl mb-3">üì¶</div>
              <h3 className="text-base font-medium text-gray-900 mb-1">
                Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
              </h3>
              <p className="text-gray-500 text-sm">
                H√£y th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c quay l·∫°i sau
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// Box th·ªëng k√™ nh·ªè g·ªçn
function StatBox({
  label,
  value,
  color,
}: {
  label: string;
  value: number;
  color: string;
}) {
  return (
    <div className="bg-white p-6 rounded-lg border shadow-sm text-center">
      <div className={`text-3xl font-bold ${color}`}>{value}</div>
      <div className="text-sm text-gray-500 mt-1">{label}</div>
    </div>
  );
}
