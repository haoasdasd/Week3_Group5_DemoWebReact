import bcrypt from "bcryptjs";
import User from "../models/User.js";
import nodemailer from "nodemailer";
import dotenv from "dotenv";

dotenv.config();

let otpStore = {}; // { email: { otp, expiresAt } }

export const register = async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const existing = await User.findOne({ email });
    if (existing) return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" });

    const hashed = await bcrypt.hash(password, 10);
    const user = await User.create({ username, email, password: hashed });
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", user });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω", error: err.message });
  }
};

export const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });

    res.status(200).json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p", error: err.message });
  }
};

// üëâ G·ª≠i OTP khi qu√™n m·∫≠t kh·∫©u
export const forgotPassword = async (req, res) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

    const otp = Math.floor(100000 + Math.random() * 900000);
    otpStore[email] = { otp, expiresAt: Date.now() + 5 * 60 * 1000 }; // 5 ph√∫t

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: `"Support Team" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`,
    });

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói g·ª≠i OTP", error: err.message });
  }
};

// üëâ X√°c minh OTP
export const verifyOtp = async (req, res) => {
  const { email, otp } = req.body;
  const record = otpStore[email];
  if (!record) return res.status(400).json({ message: "Kh√¥ng c√≥ OTP cho email n√†y" });
  if (record.expiresAt < Date.now()) return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n" });
  if (record.otp.toString() !== otp.toString()) return res.status(400).json({ message: "Sai OTP" });

  res.json({ message: "X√°c th·ª±c OTP th√†nh c√¥ng" });
};

// üëâ ƒê·ªïi m·∫≠t kh·∫©u sau khi x√°c minh OTP
export const resetPassword = async (req, res) => {
  const { email, newPassword } = req.body;
  const record = otpStore[email];
  if (!record) return res.status(400).json({ message: "Ch∆∞a x√°c minh OTP" });

  try {
    const hashed = await bcrypt.hash(newPassword, 10);
    await User.findOneAndUpdate({ email }, { password: hashed });
    delete otpStore[email];
    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", error: err.message });
  }
};
